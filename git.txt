文件的三种状态
好，现在请注意，接下来要讲的概念非常重要。对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。

由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。

git版本 git --version
1.清屏：control+l 或 输入命令clear
2.ls -al 查看配置文件目录（npm等）
  ls 查看所有文件
3.vi .zshrc 
  : 开始编辑
  esc键 + : 开始编辑
  set number 终端出现行号
  control + f 往下滚屏
  control + b 网上滚屏
  Shift + g 回到最后一行touch
  : + 行数 跳转到对应的行数
  : + 行数 dd（连续按两下d） 删除对应行数
  i insert 开始编辑
  w 保存 write
  q 退出 quit
  wq 保存退出
  esc键 开始写入命令

pwd：查看当前文件所在目录
~ ：回到根目录
-：回到上级目录(和cd ..效果一样)


# 文件颜色为红色，表示在工作区的被修改状态
# 文件颜色为绿色，表示在版本库的暂存状态
对于文件的操作
4. 文件的添加（touch）
   touch 文件名+后缀（如.txt,.html） 例：touch test.txt
   echo "文本内容xxx" > 文件名+后缀 例子：echo "我是文本内容" > text.txt
5. 打开并创建这个文本 进行编辑（vi）
   vi 文件名带后缀   例：vi test.txt
6. 查看文件内容（cat）
   cat 文件名带后缀  例：cat test.txt 
7. 复制文件（cp）
   cp 要复制的文件名带后缀 被复制的文件名带后缀   例：test.txt test2.txt  复制test.txt 并命名为test2.txt
8. 查看文件（ls）
   例：查看desktop里的文件
      cd desktop 
      ls
9. 删除文件(rm)
   （1).使用rm 要删除的文件带后缀  例：rm test3.txt
       将test3.txt删除，这时，被删除的文件并未纳入暂存区当中
   (2).使用git rm 要删除的文件带后缀  例：git rm test3.txt，
       做了2件事，1.删除了一个文件，2.将被删除的文件纳入到暂存区。
      a. git reset HEAD test3.txt 将待删除的文件从暂存区恢复到工作区
      b. git checkout -- test3.txt 将工作区的修改丢弃掉
       
10. 查看命令使用方法（man）
   man 命令  例：man rm 查看rm删除命令的使用方法
               man cp 查看复制命令的使用方法
  
11. 修改文件名，重命名
   mv 要修改的文件名带后缀 修改后的文件名带后缀   
   例：mv test.txt test2.txt 将test.txt 重命名为test2.txt

12.git commit --amend -m '再次修正' 
   这个命令既可以对上次提交的内容进行修改，也可以修改提交说明。

git的删除，添加，修改，日志

HEAD：HEAD是一个指针，通常情况下它可以将它与当前分支等同（其实它是指向当前分支）。

1、git fetch 相当于是从远程获取最新到本地，不会自动merge，如下指令：
　 git fetch orgin master //将远程仓库的master分支下载到本地当前branch中
　 git log -p master  ..origin/master //比较本地的master分支和origin/master分支的差别
　 git merge origin/master //进行合并
也可以用以下指令：
git fetch origin master:tmp //从远程仓库master分支获取最新，在本地建立tmp分支
git diff tmp //將當前分支和tmp進行對比
git merge tmp //合并tmp分支到当前分支

2. git pull：相当于是从远程获取最新版本并merge到本地
git pull origin master
git pull 相当于从远程获取最新版本并merge到本地
在实际使用中，git fetch更安全一些




   1、创建仓库（公开）
　　点击github右上角的+里面的new repository 
　　在repository name栏中输入仓库的名称
　　description 栏中可以设置仓库的说明
　　piblic（公开）通用 private（非公开）收费
　　勾选Initialize this repository with a README ，如果想向GitHub添加手中已有的Git仓库，建议不要勾选
　　Add.gitignore：下拉框中选择要使用的框架
　　Add a license：选择添加许可协议文件
　　点击create repository按钮，完成仓库的创建

　　2、克隆之前首先要选择克隆文件的位置（cd）
　　clone已有仓库
　　git clone git@github.com:XXX/yyyy.git //XXX为github的用户名，yyy为仓库名

　　3、在对应的文件夹中添加新有项
　　git status

　　4、提交
　　git add mmm.sss //mmm为文件名称，sss为文件拓展名（常用git add .）
　　git commit -m "hhh" //hhh为git commit 提交信息，是对这个提交的概述
   git commit -am "hhh" 既add又commit 
　　git log//用于查看提交日志
　　git push //更新GitHub上的仓库

　　5、用git创建仓库
　　mkdir nnn //仓库名(相当于新建一个文件夹)
　　cd nnn
　　git init //初始化仓库
　　git status //查看仓库状态
　　touch README.md //创建READEME.md文件
　　git add ERADME.md //添加ERADME.md至暂存区
　　git commit -m "hhh" //如果想要提交信息记录的更详细，请不要加 -m
　　git log --pretty=short //加--pretty=short 只显示提交信息的第一行
　　git log ggg //ggg是指指定的文件或目录，用于查看指定的目录、文件的日志
　　git log -p //查看提交所带来的改动
　　git log -p ggg //查看指定文件的改动
　　git diff //可以查看工作树，暂存区，最新提交之间的差别
　　git diff HEAD //查看工作树与最新提交的差别

　　6、分支操作
　　git branch //显示分支一览表，同时确认当前所在的分支
　　git checkout -b aaa //创建名为aaa的分支，并且切换到aaa分支
　（git branch aaa //创建名为aaa的分支，git checkout aaa // 切换到aaa分支）能和git branch -b aaa 得到同样的效果
　　git checkout - //切换到上一分支

　　7、合并分支
　　git checkout master //切换到master分支
　　git merge --no--ff aaa // 加--no--ff 参数可以在历史记录中明确地记录本次分支的合并
　　git log --graph //以图表形式查看分支

　　8、更改提交的操作
　　git reset //回溯历史版本
　　git reset --hrad //回溯到指定状态，只要提供目标时间点的哈希值

　　9、推进历史
　　git reflog //查看仓库的操作日志，找到要推历史的哈希值
　　git checkout master
　　git reset --hrad ddd //ddd为要推进历史的哈希值

　　10、修改提交信息 git commit --amend
　　压缩历史 git rebase -i 错字漏字等失误称作typo
　　根据以前的步骤在GitHub上创建仓库，应于本地的仓库名相同 GitHub上面创建的仓库的路径为git@github.com: 用户名/仓库名.git
　　git remote add eee git@github.com: 用户名/仓库名.git //添加远程仓库，并将git@github.com: 用户名/仓库名.git远程仓库的名称改为eee，一般用origin
　　git push -u eee master //推送至远程仓库 master分支下 -u 参数可以在推送的同时，将eee仓库的master分支设置为本地仓库的当前分支的的upstream（上游）。添加这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从eee的master分支中获取内容。
   如果push不成功，当你第一次push的时候一般会遇到如下报错：这种错误的主要原因是你的远程仓库的内容有改动但是你本地并没有拉去最新的代码所以会报错，git pull origin master --allow-unrelated-histories 把两段不相干的 分支进行强行合并后面再push就可以了 git push origin master
　　git checkout -b feature d eee/feature d //获取远程的feature d分支到本地仓库，-b参数后面是本地仓库中新建的仓库的名称
　　git pull eee feature d //将本地的feature d分支更新为最新状态
　　在GitHub上面查看两个分支之间的差别，只需要在地址栏中输入http://github.com/用户名/仓库名/分支1...分支2

　　11、查看master分支在最近七天内的差别
　　http://github.com/用户名/仓库名/master@{7.day.ago}...master （同样，day，week，month，year都是可以哒）

　　12、查看与指定日期之间的差别
　　http://github.com/用户名/仓库名/master@{xxxx-xx-xx}...master （xxxx-xx-xx代表年月日）



方案一：stash

stash用于将工作区发生变化的所有文件获取临时存储在“某个地方”，将工作区还原当前版本未操作前的状态；stash还可以将临时存储在“某个地方”的文件再次拿回到工作区。

stash相关常用命令：

git stash           将当前工作区所有修改过的内容存储到“某个地方”，将工作区还原到当前版本未修改过的状态
git stash list      查看“某个地方”存储的所有记录
git stash clear     清空“某个地方”
git stash pop       将第一个记录从“某个地方”重新拿到工作区（可能有冲突）
git stash apply     编号, 将指定编号记录从“某个地方”重新拿到工作区（可能有冲突） 
git stash drop      编号，删除指定编号的记录

branch相关常用命令：

git branch 分支名称           创建分支
git checkout 分支名称         切换分支
git branch -b 分支名称        创建新分支并切换到新分支 = git branch 分支名 + git checkout 分支名称 
git branch -m 分支名称        创建并切换到指定分支
git branch                  查看本地所有分支
git branch -av              查看所有分支信息
git branch -d 分支名称        删除分支

git merge 分支名称            将指定分支合并到当前分支

git 查看远程仓库，以及与本地仓库的关系：git remote show origin

git操作之pull拉取远程指定分支以及push推送到远程指定分支:
一、pull操作
1、将远程指定分支 拉取到 本地指定分支上：
git pull <远程仓库名> <远程分支名>:<本地分支名>

2、将远程指定分支 拉取到 本地当前分支上：
git pull <远程仓库名> <远程分支名>

3、将与本地当前分支同名的远程分支 拉取到 本地当前分支上
git pull <远程仓库名>

在克隆远程项目的时候，本地分支会自动与远程分支建立追踪关系，可以使用默认的origin来替代远程仓库名，
所以，我常用的命令就是 git pull origin <远程仓库名>，操作简单，安全可控。
二、push操作
1、将本地当前分支 推送到 远程指定分支上（注意：pull是远程在前本地在后，push相反）：
git push <远程仓库名> <本地分支名>:<远程分支名>

2、将本地当前分支 推送到 远程指定分支上：
git push <远程仓库名> <远程分支名>

3、将本地当前分支 推送到 与本地当前分支同名的远程分支上
git push <远程仓库名>
同样的，推荐使用第2种方式，git push origin <远程分支名>

三、解决冲突：
1.冲突的产生：如果两个分支（分支1和分支2）修改的是同一个文件中同一个位置的代码，那么，把分支2合并到分支1时，就会产生冲突。

2.解决冲突的步骤如下：
   手动修改文件：一是选择使用分支1的代码，二是选择使用分支2的代码，三是手动修改冲突部分的代码。
   git add：解决好冲突后，输入git status，会提示Unmerged paths。使用git add表示修改冲突成功（或是在sourceTree中标记冲突解决，在sourceTree中解决冲突时请始终选择暂存区内的冲突文件进行操作），此时会加入暂存区。
git commit 及 git push。
   分支2合并到分支1后，可以继续将分支1合并到分支2上。

3.冲突示例代码如下：

function gitTest() {
<<<<<<< HEAD
    console.info('This is master branch.');
=======
    console.info('This is developOne1 branch.');
>>>>>>> developOne
function gitTest() {
<<<<<<< HEAD
    console.info('This is master branch.');
=======
    console.info('This is developOne1 branch.');
>>>>>>> developOne
}

其中：
<<<<<<< HEAD 和 ======= 之间的代码为当前分支代码。
======= 和 >>>>>>> developOne 之间的代码为要合并的分支的代码。
如分支2要合并到分支1上面，那么首先要切换到分支1，然后进行合并。此时分支1就是当前分支，分支2就是要合并的分支。

四、完整的打tag
   git add .
   git commit -m "v0.3"
   git tag v0.3
   git push
   git push origin v0.3
五、版本回退
  1.回退到上一个版本
    $ git reset --hard HEAD^
  2.回退到上上一个版本
    $ git reset --hard HEAD^^
  3.回退到上一个版本
    $ git reset --hard HEAD~1（1代表想回退到第几个提交）
  4.回退到上一个版本
    $ git reset --hard commit-id(commit-id:提交的id前面几位数就可以了)
  5.返回到某个版本：使用git reflog
    (1).git log 命令可以显示所有提交过的版本信息
    (2).git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）
